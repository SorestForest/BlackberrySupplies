package ru.SorestForest;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.components.actionrow.ActionRow;
import net.dv8tion.jda.api.components.buttons.Button;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.MessageEmbed;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.commands.OptionMapping;
import net.dv8tion.jda.api.utils.messages.MessageCreateBuilder;
import net.dv8tion.jda.api.utils.messages.MessageCreateData;
import net.dv8tion.jda.api.utils.messages.MessageEditBuilder;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

import java.awt.*;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.List;
import java.util.*;
import java.util.stream.Collectors;

import static ru.SorestForest.Settings.*;

@SuppressWarnings("DataFlowIssue")
public class SlashCommandHandler extends ListenerAdapter {

    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event) {
        switch (event.getName()) {
            case NG_COMMAND -> handleSupply(event, SupplyManager.SupplyType.NG);
            case EMS_COMMAND -> handleSupply(event, SupplyManager.SupplyType.EMS);
            case SPANK_COMMAND -> handleSupply(event, SupplyManager.SupplyType.SPANK_BLANK);
            case ROLL_COMMAND -> handleRollResult(event);
            case RESULT_COMMAND -> handleResult(event);
            case "update" -> handleUpdate(event);
            case STATS_COMMAND -> handleStats(event);
            case "save" -> handleSave(event);
            case "clearmembers" -> handleCleanMembers(event);
            case "cancel" -> handleCancel(event);
            case "–ø–æ–º–æ—â—å" -> handleHelpCommand(event);
            case "dump-data" -> handleDump(event);
            case "–∞–≤—Ç–æ-—Ä–æ–ª–ª" -> {
                if (Objects.equals(event.getSubcommandName(), "–∫–∞—Ä—Ç–∞")) {
                    handleRollMap(event);
                } else if (Objects.equals(event.getSubcommandName(), "—Ñ—Ä–∞–∫—Ü–∏—è")) {
                    handleRollFactions(event);
                }
            }
            case "–∫–∞—Ä—Ç–∞" -> MapUtils.handleMapCommand(event);
            default -> System.err.println("ERROR COMMAND");
        }
    }

    private void handleRollMap(SlashCommandInteractionEvent event) {
        event.deferReply(false).queue();
        if (!event.getChannelType().isThread()) {
            event.getHook().sendMessage("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≤–µ—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∫–∏.").queue();
            return;
        }

        event.getChannel().asThreadChannel().retrieveParentMessage().queue(parentMessage -> {
            SupplyManager.Supply supply = getSupplyFromParent(event, parentMessage);
            if (supply == null) return;
            String mapsStr = event.getOption("maps", null, OptionMapping::getAsString);
            if (mapsStr == null || mapsStr.isBlank()) {
                event.getHook().sendMessage("–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.").queue();
                return;
            }
            List<String> maps = Arrays.stream(mapsStr.trim().split(","))
                    .map(String::trim)
                    .filter(s -> !s.isEmpty())
                    .toList();
            if (!MapUtils.areAllMapsValid(maps)) {
                event.getHook().sendMessage("–ù–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –±—ã–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã.").queue();
                return;
            }
            String chosenMap = Settings.capitalizeFirst(maps.get(new Random().nextInt(maps.size())));
            supply.map = chosenMap;
            updateEmbed(parentMessage.getId(), supply);

            EmbedBuilder eb = new EmbedBuilder();
            eb.setTitle("üó∫ –†–æ–ª–ª –∫–∞—Ä—Ç—ã")
                    .addField("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã", String.join(", ", maps), false)
                    .addField("‚úÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞", "**" + chosenMap + "**", false)
                    .setFooter("–í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω " + event.getUser().getName(), event.getUser().getAvatarUrl());

            event.getHook().sendMessageEmbeds(eb.build()).queue();
        });
    }

    private void handleRollFactions(SlashCommandInteractionEvent event) {
        event.deferReply(false).queue();
        if (!event.getChannelType().isThread()) {
            event.getHook().sendMessage("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≤–µ—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∫–∏.").queue();
            return;
        }
        event.getChannel().asThreadChannel().retrieveParentMessage().queue(parentMessage -> {
            SupplyManager.Supply supply = getSupplyFromParent(event, parentMessage);
            if (supply == null) return;
            String factionsStr = event.getOption("factions", null, OptionMapping::getAsString);
            if (factionsStr == null || factionsStr.isBlank()) {
                event.getHook().sendMessage("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.").queue();
                return;
            }
            factionsStr = factionsStr.replace(",","");
            List<String> factionsRoll = Arrays.stream(factionsStr.trim().split(" "))
                    .map(String::trim)
                    .filter(s -> !s.isEmpty())
                    .toList();

            List<List<MemberUtils.Faction>> factions = new ArrayList<>();

            for (String s : factionsRoll) {
                List<MemberUtils.Faction> group = new ArrayList<>();
                for (String f : s.split("\\+")) {
                    f = f.trim().toUpperCase();
                    if (MemberUtils.isFaction(f, true)) {
                        MemberUtils.Faction faction = MemberUtils.toFaction(f);
                        group.add(faction);
                    } else {
                        event.getHook().sendMessage("–û–¥–Ω–∞ –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–π –Ω–µ –±—ã–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: " + f).queue();
                        return;
                    }
                }
                if (!group.isEmpty()) factions.add(group);
            }

            if (factions.isEmpty()) {
                event.getHook().sendMessage("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω—É —Ñ—Ä–∞–∫—Ü–∏—é.").queue();
                return;
            }

            supply.attackers = factions.get(new Random().nextInt(factions.size()));



            EmbedBuilder eb = new EmbedBuilder();
            eb.setTitle("‚öîÔ∏è –†–æ–ª–ª —Ñ—Ä–∞–∫—Ü–∏–π")
                    .addField("–£—á–∞—Å—Ç–≤—É—é—â–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏", formatFactionGroups(factions), false)
                    .addField("‚úÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∫—Ü–∏—è(-–∏)", "**" + supply.getAttackersDisplay(false) + "**", false)
                    .setFooter("–í—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω " + event.getUser().getName(), event.getUser().getAvatarUrl());

            updateEmbed(parentMessage.getId(), supply);
            event.getHook().sendMessageEmbeds(eb.build()).queue();
        });
    }

    public static String formatFactionGroups(List<List<MemberUtils.Faction>> factions) {
        return factions.stream()
                .map(group -> group.stream()
                        .map(MemberUtils.Faction::displayName)
                        .collect(Collectors.joining(" + ")))
                .collect(Collectors.joining(", "));
    }



    private void handleHelpCommand(SlashCommandInteractionEvent event) {
        EmbedBuilder help = new EmbedBuilder();
        help.setTitle("üìò –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞");
        help.setDescription("–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ.");
        help.setColor(Color.CYAN);

        help.addField("/–ø–æ—Å—Ç–∞–≤–∫–∞-–Ω–≥", """
        üì¶ –ó–∞–∫–∞–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ **–∞—Ä–º–∏–∏ (NG)** –¥–ª—è –≥–æ—Å. —Å—Ç—Ä—É–∫—Ç—É—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞—Ä–º–∏–µ–π.
        **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
        ‚Ä¢ `destination` ‚Äî —Ñ—Ä–∞–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≥–æ—Å) –Ω–∞ –≤—ã–±–æ—Ä
        ‚Ä¢ `defenders` ‚Äî —Å—Ç–æ—Ä–æ–Ω–∞ –∑–∞—â–∏—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏. –ü–∏—à–µ—Ç—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏, —Å–æ—é–∑—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: lssd, fib
        ‚Ä¢ `time` ‚Äî –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)
        ‚Ä¢ `amount` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
        ‚Ä¢ `afk` ‚Äî [–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ] –µ—Å–ª–∏ –Ω–∞–¥–æ –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞–∫ AFK-–ø–æ—Å—Ç–∞–≤–∫—É, —Ç–æ –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å True
        """, false);

        help.addField("/–ø–æ—Å—Ç–∞–≤–∫–∞-–µ–º—Å", """
        üíâ –ó–∞–∫–∞–∑ –∞–ø—Ç–µ—á–µ–∫ **–º–µ–¥—Å–ª—É–∂–±—ã (EMS)** –¥–ª—è –≥–æ—Å. —Å—Ç—Ä—É–∫—Ç—É—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ EMS
        **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
        ‚Ä¢ `destination` ‚Äî —Ñ—Ä–∞–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≥–æ—Å) –Ω–∞ –≤—ã–±–æ—Ä
        ‚Ä¢ `defenders` ‚Äî —Å—Ç–æ—Ä–æ–Ω–∞ –∑–∞—â–∏—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏. –ü–∏—à–µ—Ç—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏, —Å–æ—é–∑—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: lssd, fib
        ‚Ä¢ `time` ‚Äî –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm
        ‚Ä¢ `amount` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ø—Ç–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞–∞
        ‚Ä¢ `afk` ‚Äî [–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ] –µ—Å–ª–∏ –Ω–∞–¥–æ –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞–∫ AFK-–ø–æ—Å—Ç–∞–≤–∫—É, —Ç–æ –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å True
        """, false);

        help.addField("/–ø–æ—Å—Ç–∞–≤–∫–∞-—Å–ø–∞–Ω–∫", """
        üíº –ó–∞–∫–∞–∑ —Å–ø–∞–Ω–∫–∞ (–∞–Ω–∞–ª—å–≥–µ—Ç–∏–∫–æ–≤) –¥–ª—è **–∫—Ä–∞–π–º-—Ñ—Ä–∞–∫—Ü–∏–π**.
        **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
        ‚Ä¢ `faction` ‚Äî –∫—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∞–Ω–∫ (–ø—Ä–æ–∫–∞–µ—Ç –µ–≥–æ)
        ‚Ä¢ `destination` ‚Äî –∫—É–¥–∞ —Ä–∞–∑–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–æ—Å—Ç–∞–≤–∫–∞ —Å–ø–∞–Ω–∫–∞
        ‚Ä¢ `defenders` ‚Äî —Å—Ç–æ—Ä–æ–Ω–∞ –∑–∞—â–∏—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏. –ü–∏—à–µ—Ç—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏, —Å–æ—é–∑—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: am, lcn, yak
        ‚Ä¢ `time` ‚Äî –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm
        ‚Ä¢ `amount` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–Ω–∫–∞
        ‚Ä¢ `afk` ‚Äî [–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ] –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞–∫ AFK-–ø–æ—Å—Ç–∞–≤–∫—É, –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å True
        """, false);

        help.addField("/—Ä–æ–ª–ª", """
        üé≤ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å **–∫–∞—Ä—Ç—É** –∏ **—Ñ—Ä–∞–∫—Ü–∏—é –Ω–∞–ø–∞–¥–µ–Ω–∏—è** –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É.
        **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
        ‚Ä¢ `map` ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        ‚Ä¢ `attack` ‚Äî —Ñ—Ä–∞–∫—Ü–∏—è, —Å–æ–≤–µ—Ä—à–∞—é—â–∞—è –∞—Ç–∞–∫—É. –°–æ—é–∑—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: am, lcn –∏–ª–∏ fib, lssd
        """, false);

        help.addField("/—Ä–µ–∑—É–ª—å—Ç–∞—Ç", """
        üèÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å **—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç–∞–≤–∫–∏**.
        **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
        ‚Ä¢ `winner` ‚Äî –ø–æ–±–µ–¥–∏–ª–∞ –ª–∏ –∑–∞—â–∏—Ç–∞. –ï—Å–ª–∏ –∑–∞—â–∏—Ç–∞ –≤—ã–∏–≥—Ä–∞–ª–∞, —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ true, –∏–Ω–∞—á–µ - false.
        ‚Ä¢ `result` ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
        """, false);

        help.addField("/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", """
        üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞–≤–æ–∫ **–ø–æ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏** –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –∏–ª–∏ –º–µ—Å—è—Ü.
        **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
        ‚Ä¢ `faction` ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä. LSSD, MM –∏–ª–∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è)
        ‚Ä¢ `period` ‚Äî –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """, false);
        help.addField("üîπ /–∞–≤—Ç–æ-—Ä–æ–ª–ª –∫–∞—Ä—Ç–∞", """
        –°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.
        **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
        ‚Ä¢ `maps` ‚Äî —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
        """, false);

        help.addField("üîπ /–∞–≤—Ç–æ-—Ä–æ–ª–ª —Ñ—Ä–∞–∫—Ü–∏—è", """
        –°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∞—Ç–∞–∫—É—é—â—É—é —Ñ—Ä–∞–∫—Ü–∏—é.
        **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
        ‚Ä¢ `factions` ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é;
        ‚Ä¢ —Å–æ—é–∑—ã ‚Äî —É–∫–∞–∑—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ `+`, –ø—Ä–∏–º–µ—Ä: `bsg+esb`. –ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: `bsg+lcn, ems, fib'
        """, false);

        help.setFooter("–ë–æ—Ç —Å–æ–∑–¥–∞–Ω Daniel Powell (sorestforest)");

        event.replyEmbeds(help.build()).setEphemeral(true).queue();
    }

    private void handleDump(SlashCommandInteractionEvent event) {
        event.deferReply(true).queue();
        if (!MemberUtils.isModerator(Objects.requireNonNull(event.getMember()))) {
            event.getHook().sendMessage("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.").queue();
            return;
        }
        if (!event.getChannelType().isThread()) {
            event.getHook().sendMessage("–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –≤–µ—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∫–∏.").queue();
            return;
        }

        event.getChannel().asThreadChannel().retrieveParentMessage().queue(parentMessage -> {
            SupplyManager.Supply supply = getSupplyFromParent(event, parentMessage);
            if (supply == null) return;
            String sb = "Type: " + supply.type + "\n" +
                    "Time: " + supply.time + "\n" +
                    "Destination: " + supply.destination + "\n" +
                    "Amount: " + supply.amount + "\n" +
                    "Defenders: " + supply.getDefendersDisplay(false) + "\n" +
                    "Attackers: " + supply.getAttackersDisplay(false) + "\n" +
                    "Map: " + supply.map + "\n" +
                    "Result: " + supply.result + "\n" +
                    "Ended: " + supply.ended + "\n" +
                    "AFK: " + supply.afk + "\n" +
                    "DefenderWin: " + supply.defenderWin + "\n";
            event.getHook().sendMessage(sb).queue();
        });
    }

    private void handleCancel(SlashCommandInteractionEvent event) {
        event.deferReply(true).queue();
        if (!MemberUtils.isModerator(Objects.requireNonNull(event.getMember()))) {
            event.getHook().sendMessage("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.").queue();
            return;
        }
        if (!event.getChannelType().isThread()) {
            event.getHook().sendMessage("–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –≤–µ—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∫–∏.").queue();
            return;
        }

        event.getChannel().asThreadChannel().retrieveParentMessage().queue(parentMessage -> {
            SupplyManager.Supply supply = getSupplyFromParent(event, parentMessage);
            if (supply == null) return;
            supply.ended = false;
            supply.result = "–û—Ç–º–µ–Ω–∞ // by "+ event.getUser().getName();
            updateEmbed(parentMessage.getId(), supply);
            SupplyManager.data.remove(parentMessage.getId());
            event.getHook().sendMessage("–î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã. –ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞").queue();
        });
    }

    private void handleSave(SlashCommandInteractionEvent event) {
        event.deferReply(true).queue();
        if (!MemberUtils.isModerator(Objects.requireNonNull(event.getMember()))) {
            event.getHook().sendMessage("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.").queue();
            return;
        }
        try {
            SupplyManager.saveData();
            event.getHook().sendMessage("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.").queue();
        } catch (Exception e) {
            event.getHook().sendMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage()).queue();
            e.printStackTrace();
        }
    }

    private void handleSupply(SlashCommandInteractionEvent event, SupplyManager.SupplyType type) {
        event.deferReply(false).queue();

        if (validatePermissions(event)) return;

        Member member = event.getMember();
        boolean isSpank = type == SupplyManager.SupplyType.SPANK_BLANK;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
        if (!isSpank) {
            assert member != null;
            if (!MemberUtils.isInFaction(member, type == SupplyManager.SupplyType.NG ? MemberUtils.Faction.NG : MemberUtils.Faction.EMS)) {
                event.getHook().sendMessage("–û—Ç–ø–∏—Å—å –ø–æ—Å—Ç–∞–≤–æ–∫ NG –∏ EMS –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏").queue();
                return;
            }
        } else {
            boolean hasMafiaRole = Arrays.stream(MemberUtils.Faction.values())
                    .anyMatch(f -> {
                        if (!f.isMafia()) return false;
                        assert member != null;
                        return MemberUtils.isInFaction(member, f);
                    });
            if (!hasMafiaRole) {
                event.getHook().sendMessage("–û—Ç–ø–∏—Å—å –ø–æ—Å—Ç–∞–≤–æ–∫ SPANK –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏ –ª—é–±–æ–π –º–∞—Ñ–∏–∏.").queue();
                return;
            }
            String organizer = event.getOption("faction",OptionMapping::getAsString);
            type = SupplyManager.SupplyType.valueOf("SPANK_"+organizer);
        }

        String defendersStr = event.getOption("defenders", OptionMapping::getAsString);
        String destination = event.getOption("destination", OptionMapping::getAsString);
        String time = event.getOption("time", OptionMapping::getAsString);
        int amount = event.getOption("amount", OptionMapping::getAsInt);

        if (defendersStr == null || destination == null || time == null) {
            event.getHook().sendMessage("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.").queue();
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–∫—Ü–∏–π
        ForestPair<Boolean,List<MemberUtils.Faction>> defenderFactions = MemberUtils.parseFactions(defendersStr);
        if (defenderFactions.r.isEmpty() || !defenderFactions.l) {
            event.getHook().sendMessage("–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞—â–∏—Ç—ã.").queue();
            return;
        }
        if (!MemberUtils.isFaction(destination, true)) {
            event.getHook().sendMessage("–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.").queue();
            return;
        }
        MemberUtils.Faction destFaction = MemberUtils.toFaction(destination);
        SupplyManager.Supply supply = new SupplyManager.Supply(type, time, amount, defenderFactions.r, destFaction);
        supply.defenders = defenderFactions.r;

        boolean afkStatus = Boolean.TRUE.equals(event.getOption("afk", OptionMapping::getAsBoolean));
        if (afkStatus) {
            supply.afk = true;
            supply.result = "";
        }

        int check = validateTime(event, time, supply);
        if (check == 0 && !MemberUtils.isModerator(Objects.requireNonNull(member))) return;
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –í–ó–•
        String[] parts = time.split(":");
        int hours = Integer.parseInt(parts[0]);
        int minutes = Integer.parseInt(parts[1]);
        if (Settings.isBetween(hours, minutes, 18, 30, 19, 30) && !isSpank) {
            event.getHook().sendMessage("–í –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–ª—å–∑—è –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –≤ —Å–≤—è–∑–∏ —Å –í–ó–•.").queue();
            return;
        }

        SupplyManager.SupplyType finalType = type;
        event.getHook().sendMessage(buildMessage(supply, check == 1)).queue(sentMessage -> {
            SupplyManager.registerSupply(sentMessage.getId(), supply);
            String threadName = isSpank
                    ? "spank-" + defendersStr.toLowerCase() + "(" + destination + ")"
                    : finalType.name().toLowerCase() + "-" + destination.toLowerCase();
            sentMessage.createThreadChannel(threadName).queue(thread -> {
                thread.sendMessage("–í–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ " + finalType.displayName() + " –¥–ª—è " + destFaction.displayName()
                        + ". –ó–∞—â–∏—â–∞—é—Ç: "+supply.getDefendersDisplay(false)).queue();

                if (supply.afk) {
                    String afkMention = isSpank ? supply.getDefendersDisplay(false) : destFaction.displayName();
                    thread.sendMessage("‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ –∑–∞–∫–∞–∑–∞–Ω–∞ –∫–∞–∫ **AFK**. –£ —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ **" + afkMention +
                            "** –µ—Å—Ç—å **5 –º–∏–Ω—É—Ç** –Ω–∞ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã AFK-–ø–æ—Å—Ç–∞–≤–∫–∏, –∏–Ω–∞—á–µ –æ–Ω–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è **–∑–∞–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–µ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º**. –°—Å—ã–ª–∫—É –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /—Ä–µ–∑—É–ª—å—Ç–∞—Ç, winner —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞–∫ –ó–∞—â–∏—Ç–∞.").queue();
                }
            });
        });
    }

    private int validateTime(SlashCommandInteractionEvent event, String time, SupplyManager.Supply supply) {
        if (time == null || !time.matches("^\\d{2}:\\d{2}$")) {
            event.getHook().sendMessage("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è HH:mm.").queue();
            return 0;
        }
        String[] parts = time.split(":");
        int hours, minutes;
        try {
            hours = Integer.parseInt(parts[0]);
            minutes = Integer.parseInt(parts[1]);
        } catch (NumberFormatException e) {
            event.getHook().sendMessage("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç.").queue();
            return 0;
        }
        if (hours < 0 || hours >= 23 || minutes < 0 || minutes >= 60) {
            event.getHook().sendMessage("–û—à–∏–±–∫–∞: —á–∞—Å—ã –∏–ª–∏ –º–∏–Ω—É—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.").queue();
            return 0;
        }
        LocalTime enteredTime = LocalTime.of(hours, minutes);
        LocalTime moscowTime = Settings.getMoscowTime();
        if (!enteredTime.isAfter(moscowTime)) {
            event.getHook().sendMessage("–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.").queue();
            return 0;
        }
        if (!(Settings.isBetween(hours, minutes, 13, 0, 15, 0) || Settings.isBetween(hours, minutes, 21, 0, 22, 0)) && supply.afk) {
            return 1;
        }
        return 2;
    }

    private void handleRollResult(SlashCommandInteractionEvent event) {
        event.deferReply(true).queue();
        if (!event.getChannelType().isThread()) {
            event.getHook().sendMessage("–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –≤–µ—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∫–∏.").queue();
            return;
        }


        event.getChannel().asThreadChannel().retrieveParentMessage().queue(parentMessage -> {
            SupplyManager.Supply supply = getSupplyFromParent(event, parentMessage);
            if (supply == null) return;

            String map = event.getOption("map", OptionMapping::getAsString);
            String attack = event.getOption("attack", OptionMapping::getAsString);
            supply.map = map;
            ForestPair<Boolean,List<MemberUtils.Faction>> factions = MemberUtils.parseFactions(attack);
            if (factions.r.isEmpty() || !factions.l) {
                event.getHook().sendMessage("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏. –§—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ—á–∏—Å–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: AM, LCN –∏–ª–∏ am, lcn").queue();
                return;
            }
            supply.attackers = factions.r;
            updateEmbed(parentMessage.getId(), supply);
            event.getHook().sendMessage("–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!").queue();
        });
    }

    private void handleResult(SlashCommandInteractionEvent event) {
        if (!event.getChannelType().isThread()) {
            event.reply("–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –≤–µ—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∫–∏.").setEphemeral(true).queue();
            return;
        }

        event.deferReply(true).queue();
        event.getChannel().asThreadChannel().retrieveParentMessage().queue(parentMessage -> {
            SupplyManager.Supply supply = getSupplyFromParent(event, parentMessage);
            if (supply == null) return;

            String winner = event.getOption("winner", OptionMapping::getAsString);
            String result = event.getOption("result", OptionMapping::getAsString);

            if (winner == null || result == null) {
                event.getHook().sendMessage("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã winner –∏ result –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.").setEphemeral(true).queue();
                return;
            }

            supply.defenderWin = winner.equals("–ó–∞—â–∏—Ç–∞");
            supply.result = result;
            supply.ended = true;
            supply.timeEnded = LocalDateTime.now(ZoneId.of("Europe/Moscow"));
            updateEmbed(parentMessage.getId(), supply);
            event.getHook().sendMessage("–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, GG, WP! "+supply.defenderWin).queue();
        });
    }

    private void handleUpdate(@NotNull SlashCommandInteractionEvent event) {
        if (!event.getChannelType().isThread()) {
            event.reply("–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –≤–µ—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∫–∏.").setEphemeral(true).queue();
            return;
        }

        String key = event.getOption("key", OptionMapping::getAsString);
        String value = event.getOption("value", OptionMapping::getAsString);
        event.deferReply(true).queue();

        event.getChannel().asThreadChannel().retrieveParentMessage().queue(parentMessage -> {
            SupplyManager.Supply supply = getSupplyFromParent(event, parentMessage);
            if (supply == null) {
                return;
            }

            if (!MemberUtils.isModerator(Objects.requireNonNull(event.getMember()))) {
                event.getHook().sendMessage("–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å —Ä–æ–ª—å—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.").queue();
                return;
            }
            // time, destination, amount, defenders, map, result, attackers, afk, defenderWin, ended
            switch (Objects.requireNonNull(key)) {
                case "time" -> supply.time = value;
                case "destination" -> supply.destination = MemberUtils.toFaction(value);
                case "amount" -> {
                    assert value != null;
                    supply.amount = Integer.parseInt(value);
                }
                case "defenders" -> supply.defenders = MemberUtils.parseFactions(value).r;
                case "map" -> supply.map = value;
                case "result" -> supply.result = value;
                case "attackers" -> supply.attackers = MemberUtils.parseFactions(value).r;
                case "afk" -> supply.afk = Boolean.parseBoolean(value);
                case "defenderWin" -> supply.defenderWin = Boolean.parseBoolean(value);
                case "ended" -> supply.ended = Boolean.parseBoolean(value);
                default -> {
                    event.getHook().sendMessage("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–ª—é—á.").queue();
                    return;
                }
            }
            updateEmbed(parentMessage.getId(), supply);
            event.getHook().sendMessage("–ü–æ—Å—Ç–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.").queue();
        });
    }

    // –î–æ–±–∞–≤—å –ø–æ–ª–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    private final HashMap<String, ForestPair<String,String>> cleanMembersConfirmations = new HashMap<>();
    // –ö–ª—é—á ‚Äî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞), –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Ñ—Ä–∞–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏

    private void handleCleanMembers(SlashCommandInteractionEvent event) {
        if (!MemberUtils.isModerator(Objects.requireNonNull(event.getMember()))) {
            event.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.").setEphemeral(true).queue();
            return;
        }

        String factionName = event.getOption("faction", OptionMapping::getAsString);
        if (factionName == null) {
            event.reply("–£–∫–∞–∂–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é.").setEphemeral(true).queue();
            return;
        }

        MemberUtils.Faction faction;
        try {
            faction = MemberUtils.Faction.valueOf(factionName.toUpperCase());
        } catch (IllegalArgumentException e) {
            event.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—Ä–∞–∫—Ü–∏—è: " + factionName).setEphemeral(true).queue();
            return;
        }
        String userID = event.getOption("leader",OptionMapping::getAsString);
        cleanMembersConfirmations.put(event.getUser().getId(), ForestPair.of(faction.name(),userID));
        event.reply("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Ä–æ–ª–∏ —Ñ—Ä–∞–∫—Ü–∏–∏ **" + faction.name() + "** —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
                .addComponents(
                        ActionRow.of(Button.danger("cleanmembers_confirm", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
                                Button.secondary("cleanmembers_cancel", "–û—Ç–º–µ–Ω–∞"))
                )
                .setEphemeral(true)
                .queue();
    }

    @Override
    public void onButtonInteraction(ButtonInteractionEvent event) {
        if (event.getComponentId().equals("cleanmembers_confirm")) {
            String userId = event.getUser().getId();
            if (!cleanMembersConfirmations.containsKey(userId)) {
                event.reply("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.").setEphemeral(true).queue();
                return;
            }
            String factionName = cleanMembersConfirmations.get(userId).l;
            String leaderID = cleanMembersConfirmations.get(userId).r;
            cleanMembersConfirmations.remove(userId);

            MemberUtils.Faction faction = MemberUtils.Faction.valueOf(factionName);
            Role factionRole = faction.asRole();
            if (factionRole == null) {
                event.reply("–†–æ–ª—å —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!").setEphemeral(true).queue();
                return;
            }

            Objects.requireNonNull(event.getGuild()).loadMembers().onSuccess(members -> {
                List<Member> filtered = members.stream().filter(m -> m.getUnsortedRoles().contains(factionRole)).toList();
                for (Member member : filtered) {
                    event.getGuild().removeRoleFromMember(member, factionRole).queue();
                    event.getGuild().removeRoleFromMember(member, MemberUtils.SUPPLY_ROLE).queue();
                    event.getGuild().removeRoleFromMember(member, MemberUtils.DEPLEADER_ROLE).queue();
                }

                event.reply("–†–æ–ª–∏ —Ñ—Ä–∞–∫—Ü–∏–∏ " + faction.name() + " —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã —É "+ filtered.size() + " –∏–≥—Ä–æ–∫–æ–≤")
                        .setEphemeral(true).queue();
                sendLeaderRemovalMessage(SupplyManager.NEWS_CHANNEL,faction.displayName(),leaderID, factionRole.getId(),factionRole.getId(),MemberUtils.DEPLEADER_ROLE.getId(),MemberUtils.SUPPLY_ROLE.getId());
            });



        } else if (event.getComponentId().equals("cleanmembers_cancel")) {
            cleanMembersConfirmations.remove(event.getUser().getId());
            event.reply("–û—á–∏—Å—Ç–∫–∞ —Ä–æ–ª–µ–π –æ—Ç–º–µ–Ω–µ–Ω–∞.").setEphemeral(true).queue();
        }
    }


    private void handleStats(SlashCommandInteractionEvent event) {
        event.deferReply(true).queue();
        String faction = event.getOption("faction", OptionMapping::getAsString);
        String period = event.getOption("period", OptionMapping::getAsString);
        int days;
        if (Objects.equals(period, "–º–µ—Å—è—Ü")) {
            days = 31;
        } else {
            days = 7;
        }
        MessageEmbed statsEmbed = SupplyStats.calculateStats(faction, days);
        event.getHook().sendMessageEmbeds(statsEmbed).queue();
    }

    private boolean validatePermissions(SlashCommandInteractionEvent event) {
        if (!MemberUtils.isSupplier(Objects.requireNonNull(event.getMember()))) {
            event.getHook().sendMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø–∏—Å–∏ –ø–æ—Å—Ç–∞–≤–∫–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –æ—Ç–ø–∏—Å–∏.").queue();
            return true;
        }
        if (!Settings.REPORT_CHANNEL_ID.equals(event.getChannelId())) {
            event.getHook().sendMessage("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –æ—Ç–ø–∏—Å–µ–π.").queue();
            return true;
        }
        return false;
    }

    private SupplyManager.Supply getSupplyFromParent(SlashCommandInteractionEvent event, Message parentMessage) {
        if (parentMessage == null) {
            event.getHook().sendMessage("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ –æ—à–∏–±–∫–∏: 01.").setEphemeral(true).queue();
            return null;
        }
        SupplyManager.Supply supply = SupplyManager.getByMessageID(parentMessage.getId());
        if (supply == null) {
            event.getHook().sendMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É! –ö–æ–¥ –æ—à–∏–±–∫–∏: 02.").setEphemeral(true).queue();
            return null;
        }
        if (!MemberUtils.isInFaction(Objects.requireNonNull(event.getMember()), supply.type.faction())) {
            event.getHook().sendMessage("–î–∞–Ω–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –≤–∞—à–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ " + supply.type.faction() + " –¥–ª—è —Ä–µ–¥–∞–∫—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.").queue();
            return null;
        }
        return supply;
    }

    private MessageEmbed buildEmbed(SupplyManager.Supply supply) {
        EmbedBuilder builder = new EmbedBuilder();
        // –¶–≤–µ—Ç –ø–æ —Ç–∏–ø—É –ø–æ—Å—Ç–∞–≤–∫–∏
        builder.setColor(getColorForType(supply.type));
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–∫–æ–Ω–∫–∞
        builder.setTitle(getSupplyIcon(supply.type) + " –ü–æ—Å—Ç–∞–≤–∫–∞ " + supply.type.displayName() + " –¥–ª—è "+ supply.destination + " // Blackberry " + EmojiUtils.BLACKBERRY_EMOJI);
        // –§—Ä–∞–∫—Ü–∏—è
        builder.addField("–ó–∞—â–∏—Ç–∞", supply.getDefendersDisplay(true), true);
        // –í—Ä–µ–º—è
        builder.addField("–í—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∫–∏", supply.time, true);
        // –ö–æ–ª-–≤–æ
        builder.addField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–∫–∞–∑–µ", String.valueOf(supply.amount), true);
        // –ù–∞–ø–∞–¥–∞–≤—à–∏–µ
        builder.addField("–ù–∞–ø–∞–¥–∞—é—Ç", supply.attackers != null ? supply.getAttackersDisplay(true) : "‚Äî", true);
        // –ö–∞—Ä—Ç–∞
        builder.addField("–ö–∞—Ä—Ç–∞", Settings.capitalizeFirst(supply.map), true);
        // –†–µ–∑—É–ª—å—Ç–∞—Ç
        builder.addField("–ò—Ç–æ–≥", supply.result != null ? supply.result : "‚Äî", true);
        // AFK
        if (supply.afk) {
            builder.addField("AFK", "–ü–æ—Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ –∑–∞–∫–∞–∑–∞–Ω–∞ –∫–∞–∫ AFK!", false);
        }
        return builder.build();
    }

    public static final String EMS_ICON = "üöë";
    public static final String SPANK_ICON = "\uD83D\uDC8A";
    public static final String NG_ICON = "\uD83D\uDE9B";
    public static final String DEFAULT_ICON = "üöö";

    @NotNull
    @Contract(pure = true)
    private String getSupplyIcon(@NotNull SupplyManager.SupplyType type) {
        return switch (type) {
            case EMS -> EMS_ICON; // –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å
            case NG -> NG_ICON;  // –ê—Ä–º–∏—è / –≤–æ–µ–Ω–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞ (—à–ª–µ–º)

            case SPANK_MM, SPANK_LCN, SPANK_RM, SPANK_YAK, SPANK_AM -> SPANK_ICON ; // –°–ø–∞–Ω–∫ ‚Äî —á–µ–º–æ–¥–∞–Ω—á–∏–∫/–∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞

            default -> DEFAULT_ICON; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥—Ä—É–∑–æ–≤–∏–∫
        };
    }


    @NotNull
    private Color getColorForType(@NotNull SupplyManager.SupplyType type) {
        return type.faction().color();
    }

    @NotNull
    private MessageCreateData buildMessage(SupplyManager.Supply supply, boolean pingModerators) {
        MessageEmbed embed = buildEmbed(supply);
        MessageCreateBuilder builder = new MessageCreateBuilder();
        builder.setEmbeds(embed);
        String message = String.format("<@&%s> <@&%s>", CRIME_ROLE_ID, STATE_ROLE_ID);
        if (pingModerators){
            message += " ";
            message += String.format("<@&%s>", MODERATOR_ROLE_ID);
        }
        builder.setContent(message);
        return builder.build();
    }

    private void updateEmbed(String messageID, SupplyManager.Supply supply) {
        SupplyManager.SUPPLY_CHANNEL.retrieveMessageById(messageID)
                .queue(message -> {
                    MessageEditBuilder builder = new MessageEditBuilder();
                    builder.setEmbeds(buildEmbed(supply));
                    String content = String.format("<@&%s> <@&%s>", CRIME_ROLE_ID, STATE_ROLE_ID);
                    builder.setContent(content);
                    message.editMessage(builder.build()).queue();
                });
    }

    public static void sendLeaderRemovalMessage(TextChannel textChannel,
                                                String factionName,
                                                String userId,
                                                String factionRoleId,
                                                String crimeRoleId,
                                                String deputyRoleId,
                                                String supplyRoleId) {

        String message = String.format("""
                @everyone

                üé§ **–õ–∏–¥–µ—Ä %s** <@%s> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ–π –ø—É—Ç—å –Ω–∞ –ø–æ—Å—Ç—É –≥–ª–∞–≤—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ë—ã–ª–æ –º–Ω–æ–≥–æ —è—Ä–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–∏–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –∑–∞ —á—Ç–æ –≤—ã—Ä–∞–∂–∞–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!

                üíÄ –†–æ–ª—å <@&%s> –±—ã–ª–∞ —Å–Ω—è—Ç–∞ —Å–æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

                üßπ –¢–∞–∫–∂–µ —Ä–æ–ª–∏ <@&%s>, <@&%s> –∏ <@&%s> –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —É –≤—Å–µ—Ö, –∫—Ç–æ –≤—Ö–æ–¥–∏–ª –≤ —Å–æ—Å—Ç–∞–≤ **%s**.
                """,
                factionName,
                userId,
                factionRoleId,
                crimeRoleId,
                deputyRoleId,
                supplyRoleId,
                factionName
        );

        textChannel.sendMessage(message).queue();
    }
}
